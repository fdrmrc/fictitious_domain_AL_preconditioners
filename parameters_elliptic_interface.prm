# Listing of Parameters
# ---------------------
subsection Elliptic Interface Problem
set Beta_1                             = 1
set Beta_2                             = 10
set Coupling quadrature order          = 3
set FE degree background               = 1
set FE degree immersed                 = 1
set Homogeneous Dirichlet boundary ids = 0, 1, 2, 3
set Output directory                   = .


  subsection AL preconditioner
   # Perform a parameter study on the AL parameter gamma on a coarse mesh to
   # select experimentally an optimal value.
set Do parameter study             = true

   # Use diagonal approximation for the inverse (squared) of the immersed
   # mass matrix.
set Use diagonal inverse           = false

   # Use the modified AL preconditioner. If false, the classical AL
   # preconditioner is used.
set Use modified AL preconditioner = true

   # Use sqrt(2)-rule for gamma. It makes sense only for modified AL
   # variant.
set Use sqrt(2)-rule for gamma     = true
set Verbosity level                = 10
set gamma                          = 10
  end

  subsection Grid generation
set Background grid generator           = hyper_cube
set Background grid generator arguments = -1: 1: true
set Immersed grid generator             = hyper_cube
set Immersed grid generator arguments   = -0.14: 0.44: true
  end

  subsection Inner solver control
set Log frequency = 1
set Log history   = false
set Log result    = true
set Max steps     = 1000
set Reduction     = 1.e-20
set Tolerance     = 1.e-4 
  end

  subsection Outer solver control
set Log frequency = 1
set Log history   = true   # default: false
set Log result    = true
set Max steps     = 1000
set Reduction     = 1.e-20
set Tolerance     = 1.e-6 
  end

  subsection Parameter study
   # Number of steps from start to stop. (Similar to linspace in Python or
   # MatLab).
set Number of steps = 100

   # Starting value for the range of values of gamma we want to test.
set Start gamma     = 0.001

   # Last value for the range of values of gamma we want to test.
set Stop gamma      = 1
  end

  subsection Refinement and remeshing
   # Initial number of refinements used for the background domain Omega.
set Initial background refinement = 4

   # Initial number of refinements used for the immersed domain Gamma.
set Initial immersed refinement   = 2

   # Number of refinement cycles to perform convergence studies.
set Refinemented cycles           = 7
  end

  subsection Right hand side
   # Sometimes it is convenient to use symbolic constants in the expression
   # that describes the function, rather than having to use its numeric value
   # everywhere the constant appears. These values can be defined using this
   # parameter, in the form `var1=value1, var2=value2, ...'.
   #
   # A typical example would be to set this runtime parameter to
   # `pi=3.1415926536' and then use `pi' in the expression of the actual
   # formula. (That said, for convenience this class actually defines both
   # `pi' and `Pi' by default, but you get the idea.)
set Function constants  =

   # The formula that denotes the function you want to evaluate for
   # particular values of the independent variables. This expression may
   # contain any of the usual operations such as addition or multiplication,
   # as well as all of the common functions such as `sin' or `cos'. In
   # addition, it may contain expressions like `if(x>0, 1, -1)' where the
   # expression evaluates to the second argument if the first argument is
   # true, and to the third argument otherwise. For a full overview of
   # possible expressions accepted see the documentation of the muparser
   # library at http://muparser.beltoforion.de/.
   #
   # If the function you are describing represents a vector-valued function
   # with multiple components, then separate the expressions for individual
   # components by a semicolon.
set Function expression = 0; 0; 0

   # The names of the variables as they will be used in the function,
   # separated by commas. By default, the names of variables at which the
   # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
   # 3d) for spatial coordinates and `t' for time. You can then use these
   # variable names in your function expression and they will be replaced by
   # the values of these variables at which the function is currently
   # evaluated. However, you can also choose a different set of names for the
   # independent variables at which to evaluate your function expression. For
   # example, if you work in spherical coordinates, you may wish to set this
   # input parameter to `r,phi,theta,t' and then use these variable names in
   # your function expression.
set Variable names      = x,y,t
  end

end


